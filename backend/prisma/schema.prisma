// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  username     String  @unique
  email        String  @unique
  password     String
  firstName    String
  lastName     String
  refreshToken String? @unique

  chatrooms       Chatroom[]
  UserChatroom    UserChatroom[]
}

model Chatroom {
  room_id     String   @id @default(uuid())
  name        String
  description String?
  creatorId   String
  members     Json[] // Each element: { userId: String, username: String }
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  user         User           @relation(fields: [creatorId], references: [id])
  UserChatroom UserChatroom[]
  messages     message[]
}

model UserChatroom {
  id         String @id @default(uuid())
  userId     String   
  chatroomId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatroom   Chatroom @relation(fields: [chatroomId], references: [room_id], onDelete: Cascade)
  @@unique([userId, chatroomId]) // composite unique
}

model message {
  chatroomId String @id
  content Json[] //Each element is like {"message":String ,"user_id":String,"username":String,"timestamp":Date} 
  chatroom   Chatroom @relation(fields: [chatroomId], references: [room_id], onDelete: Cascade)
}
